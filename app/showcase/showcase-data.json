[
  {
    "slug": "MinimalPricingLayout",
    "title": "Minimalist Pricing Layout",
    "description": "A clean, responsive SaaS pricing section showcasing multiple plans with feature highlights, clear call-to-action, and light/dark mode support, perfect for landing pages and indie products.",
    "category": "pricing",
    "code": "import { motion } from \"streamui-deps\";\nimport { FaCheck } from \"streamui-deps\";\nimport { IoIosClose } from \"streamui-deps\";\nimport PropTypes from \"prop-types\";\n\nconst plans = [\n  {\n    name: \"Starter\",\n    price: \"Free\",\n    description: \"Basic components and regular updates.\",\n    features: [\"10+ Components\", \"Basic Animations\", \"Light/Dark Mode\", \"All Starter Features\"],\n    notIncluded: [\"Priority Support\", \"Component Requests\", \"Team Collaboration\"],\n    highlight: false,\n  },\n  {\n    name: \"Pro\",\n    price: \"$9/mo\",\n    description: \"Access all advanced components and premium support.\",\n    features: [\"All Starter Features\", \"Animated Components\", \"Priority Support\", \"Component Requests\"],\n    notIncluded: [\"Priority Support\", \"Component Requests\", \"Team Collaboration\"],\n    highlight: true,\n  },\n  {\n    name: \"Team\",\n    price: \"$29/mo\",\n    description: \"For teams and startups needing advanced support.\",\n    features: [\n      \"All Pro Features\",\n      \"Team Collaboration\",\n      \"Custom Branding\",\n      \"Animated Components\",\n      \"Priority Support\",\n      \"Light/Dark Mode\",\n      \"Component Requests\",\n    ],\n    highlight: false,\n  },\n];\n\nexport function PricingCard({\n  name,\n  price,\n  description,\n  features,\n  notIncluded,\n  highlight,\n}) {\n  return (\n    <motion.div\n      whileHover={{ scale: 1.03 }}\n      whileTap={{ scale: 0.98 }}\n      className={`border rounded-xl p-6 shadow-sm bg-white dark:bg-neutral-900 ${\n        highlight\n          ? \"border-blue-500 shadow-lg\"\n          : \"border-gray-200 dark:border-neutral-700\"\n      }`}\n    >\n      <div className=\"flex justify-center\">\n        <h3 className=\"text-lg dark:text-black font-medium bg-green-500 mb-4 px-6 py-1 rounded-full\">\n          {name}\n        </h3>\n      </div>\n      <p className=\"text-3xl font-bold mb-4\">{price}</p>\n      <p className=\"text-gray-600 dark:text-gray-400 mb-4\">{description}</p>\n      <ul className=\"text-sm text-left mb-6\">\n        {features.map((feature) => (\n          <li key={feature} className=\"flex items-center mb-1\">\n            <span className=\"text-green-500 mr-2\">\n              <FaCheck />\n            </span>{\" \"}\n            {feature}\n          </li>\n        ))}\n        {notIncluded &&\n          notIncluded.map((item) => (\n            <li key={item} className=\"flex items-center mb-1\">\n              <span className=\"text-red-500\">\n                <IoIosClose className=\"text-2xl font-semibold\" />\n              </span>\n              {item}\n            </li>\n          ))}\n      </ul>\n      <button className=\"w-full py-2 rounded-md bg-black text-white dark:bg-white dark:text-black hover:opacity-90 transition\">\n        Get Started\n      </button>\n    </motion.div>\n  );\n}\n\nPricingCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  price: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  features: PropTypes.arrayOf(PropTypes.string).isRequired,\n  notIncluded: PropTypes.arrayOf(PropTypes.string),\n  highlight: PropTypes.bool,\n};\n\nexport default function PricingSection() {\n  return (\n    <section className=\"py-16 bg-gray-50 dark:bg-neutral-950\">\n      <div className=\"max-w-5xl mx-auto px-4 text-center\">\n        <h2 className=\"text-3xl font-bold mb-4\">Choose Your Plan</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 mb-12\">\n          Simple, transparent pricing for developers and indie makers.\n        </p>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {plans.map((plan) => (\n            <PricingCard\n              key={plan.name}\n              name={plan.name}\n              price={plan.price}\n              description={plan.description}\n              features={plan.features}\n              notIncluded={plan.notIncluded}\n              highlight={plan.highlight}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}",
    "implementation": "<PricingCard name=\"Pro\" price=\"$9/mo\" description=\"Access all advanced components and premium support.\" features={[\"All Starter Features\", \"Animated Components\", \"Priority Support\", \"Component Requests\"]} notIncluded={[\"Team Collaboration\"]} highlight={true} />",
    "props": [
      {
        "name": "name",
        "type": "string",
        "required": false,
        "default": "Pro",
        "description": ""
      },
      {
        "name": "price",
        "type": "string",
        "required": false,
        "default": "$9/mo",
        "description": ""
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "default": "Access all advanced components and premium support.",
        "description": ""
      },
      {
        "name": "features",
        "type": "string",
        "required": false,
        "default": "[\n  \"All Starter Features\",\n  \"Animated Components\",\n  \"Priority Support\",\n  \"Component Requests\"\n]",
        "description": ""
      },
      {
        "name": "notIncluded",
        "type": "string",
        "required": false,
        "default": "[\n  \"Team Collaboration\"\n]",
        "description": ""
      },
      {
        "name": "highlight",
        "type": "string",
        "required": false,
        "default": "true",
        "description": ""
      }
    ],
    "componentName": "Pricing1"
  },
  {
    "slug": "AestheticAuthCard",
    "title": "Aesthetic Auth Card",
    "description": "A clean, responsive authentication component with dynamic login and signup modes, glassmorphic styling, and light/dark mode support. Perfect for SaaS products and indie apps requiring a polished, minimalist experience.",
    "category": "cards",
    "code": "\"use client\";\nimport React, { useState } from \"react\";\nimport { IoMdCloseCircle } from \"streamui-deps\";\n\nexport default function AuthForm({\n  mode: initialMode = \"login\",\n  onSubmit,\n  title,\n  description,\n  submitText,\n  extraFields,\n}) {\n  const [mode, setMode] = useState(initialMode);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const initialExtras =\n    mode === \"signup\"\n      ? extraFields && extraFields.length > 0\n        ? extraFields.reduce((acc, field) => ({ ...acc, [field.name]: \"\" }), {})\n        : { name: \"\", address: \"\" }\n      : {};\n  const [extras, setExtras] = useState(initialExtras);\n  const [isLoading, setIsLoading] = useState(false);\n  const [agreed, setAgreed] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!agreed) return alert(\"Please agree to the Terms and Conditions.\");\n    setIsLoading(true);\n\n    try {\n      const payload =\n        mode === \"signup\"\n          ? { email, password, ...extras }\n          : { email, password };\n\n      console.log(mode === \"signup\" ? \"Signing up user:\" : \"Logging in user:\", payload);\n\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      onSubmit(payload);\n    } catch (error) {\n      console.error(\"Error in auth:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleExtraChange = (e) => {\n    setExtras({ ...extras, [e.target.name]: e.target.value });\n  };\n\n  const toggleMode = () => {\n    const newMode = mode === \"login\" ? \"signup\" : \"login\";\n    setMode(newMode);\n    setExtras(\n      newMode === \"signup\"\n        ? extraFields && extraFields.length > 0\n          ? extraFields.reduce((acc, field) => ({ ...acc, [field.name]: \"\" }), {})\n          : { name: \"\", address: \"\" }\n        : {}\n    );\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-sm rounded-xl p-6 bg-white dark:bg-black/60 backdrop-blur-md border border-black/10 dark:border-white/20 shadow-lg\">\n      <div className=\"flex justify-between pb-2\">\n        <IoMdCloseCircle className=\"text-neutral-400\"/>\n        <IoMdCloseCircle className=\"text-neutral-400\"/>\n      </div>\n      <div className=\"px-2\">\n      <div className=\"flex justify-center mb-2\">\n        <h2 className=\"text-lg rounded-full px-4 py-1 tracking-wide font-medium text-black bg-green-500 text-center\">\n          {title || (mode === \"login\" ? \"Welcome Back\" : \"Create Account\")}\n        </h2>\n      </div>\n        <p className=\"text-md text-neutral-600 dark:text-neutral-400 text-center mt-1\">\n          {description ? description : \"Continue to your dashboard.\"}\n        </p>\n        <form onSubmit={handleSubmit} className=\"flex flex-col gap-4 mt-6\">\n          <input\n            className=\"w-full px-3 py-2 border border-neutral-300 dark:border-neutral-700 rounded-md bg-transparent text-black dark:text-white placeholder-neutral-500 dark:placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-black dark:focus:ring-white transition\"\n            type=\"email\"\n            name=\"email\"\n            required\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            placeholder=\"Email\"\n          />\n          <input\n            className=\"w-full px-3 py-2 border border-neutral-300 dark:border-neutral-700 rounded-md bg-transparent text-black dark:text-white placeholder-neutral-500 dark:placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-black dark:focus:ring-white transition\"\n            type=\"password\"\n            name=\"password\"\n            required\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Password\"\n          />\n          {mode === \"signup\" &&\n            Object.keys(extras).map((key) => (\n              <input\n                key={key}\n                className=\"w-full px-3 py-2 border border-neutral-300 dark:border-neutral-700 rounded-md bg-transparent text-black dark:text-white placeholder-neutral-500 dark:placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-black dark:focus:ring-white transition\"\n                type=\"text\"\n                name={key}\n                required\n                value={extras[key]}\n                onChange={handleExtraChange}\n                placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\n              />\n            ))}\n          <label className=\"flex items-center gap-2 text-sm text-neutral-700 dark:text-neutral-300\">\n            <input\n              type=\"checkbox\"\n              checked={agreed}\n              onChange={(e) => setAgreed(e.target.checked)}\n              className=\"border border-neutral-300 dark:border-neutral-700 rounded-sm focus:ring-black dark:focus:ring-white\"\n              required\n            />\n            I agree to the Terms and Conditions\n          </label>\n          <button\n            type=\"submit\"\n            disabled={isLoading || !agreed}\n            className=\"w-full mt-2 hover:scale-105 duration-300 hover:shadow-xl bg-black dark:bg-white text-white dark:text-black hover:opacity-90 font-medium py-2 rounded-md transition active:scale-95 disabled:opacity-50\"\n          >\n            {isLoading\n              ? \"Processing...\"\n              : submitText || (mode === \"login\" ? \"Login\" : \"Sign Up\")}\n          </button>\n        </form>\n        <div className=\"text-center text-sm text-neutral-700 dark:text-neutral-300 mt-4\">\n          {mode === \"login\" ? (\n            <p>\n              Don't have an account?{\" \"}\n              <button\n                type=\"button\"\n                onClick={toggleMode}\n                className=\"underline hover:text-black dark:hover:text-white\"\n              >\n                Sign up\n              </button>\n            </p>\n          ) : (\n            <p>\n              Already have an account?{\" \"}\n              <button\n                type=\"button\"\n                onClick={toggleMode}\n                className=\"underline hover:text-black dark:hover:text-white\"\n              >\n                Login\n              </button>\n            </p>\n          )}\n        </div>\n        </div>\n        <div className=\"flex justify-between pt-2\">\n        <IoMdCloseCircle className=\"text-neutral-400\"/>\n        <IoMdCloseCircle className=\"text-neutral-400\"/>\n      </div>\n      </div>\n    </div>\n  );\n}",
    "implementation": "<AuthForm mode=\"login\" onSubmit={handleAuthSubmit} title=\"Welcome to StreamUI\" description=\"Sign in to access your dashboard and manage your components seamlessly.\" submitText=\"Get Started\" extraFields={[{ name: \"username\", label: \"Username\" }, { name: \"phone\", label: \"Phone Number\" },]} />",
    "props": [
      {
        "name": "mode",
        "type": "string",
        "required": false,
        "default": "login",
        "description": ""
      },
      {
        "name": "onSubmit",
        "type": "string",
        "required": false,
        "default": "{handleAuthSubmit}",
        "description": ""
      },
      {
        "name": "title",
        "type": "string",
        "required": false,
        "default": "Welcome to StreamUI",
        "description": ""
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "default": "Sign in to access your dashboard and manage your components seamlessly.",
        "description": ""
      },
      {
        "name": "submitText",
        "type": "string",
        "required": false,
        "default": "Get Started",
        "description": ""
      },
      {
        "name": "extraFields",
        "type": "string",
        "required": false,
        "default": "{[{ name: \"username\", label: \"Username\" }",
        "description": ""
      }
    ],
    "componentName": "Auth1"
  },
  {
    "slug": "GlassmorphismNavbar",
    "title": "Glassmorphism Navbar",
    "description": "A modern, floating glassmorphism navbar designed for SaaS products and startup landing pages. Frosted glass background with subtle gradients for a premium aesthetic. Rounded, spacious layout that adapts seamlessly to all screen sizes.",
    "category": "navbar",
    "code": "\"use client\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { GiHamburgerMenu } from \"streamui-deps\";\n\nexport default function Navbar({\n  logo = { text: \"StreamUI\", href: \"/\", image: null },\n  links = [\n    { label: \"Home\", href: \"#home\" },\n    { label: \"Features\", href: \"#features\" },\n    { label: \"Reviews\", href: \"#Reviews\" },\n    { label: \"FAQs\", href: \"#faqs\" },\n  ],\n  mode = \"light\",\n}) {\n  const [isDark, setIsDark] = useState(mode === \"dark\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    setIsDark(mode === \"dark\");\n  }, [mode]);\n\n  const actions = useMemo(() => (\n    <div className=\"flex gap-2\">\n      <button\n        className={`px-4 py-1 rounded ring-1 ring-inset ${\n          isDark\n            ? \"bg-white text-black ring-black\"\n            : \"bg-black text-white ring-white\"\n        }`}\n      >\n        Log In\n      </button>\n      <button\n        className={`px-4 py-1 rounded ring-1 ring-inset ${\n          isDark\n            ? \"bg-black text-white ring-white\"\n            : \"bg-white text-black ring-black\"\n        }`}\n      >\n        Sign Up\n      </button>\n    </div>\n  ), [isDark]);\n\n  return (\n    <nav\n      className={`relative max-w-4xl mx-auto rounded-xl w-[95%] flex flex-col md:flex-row items-center justify-between px-6 py-3 backdrop-blur-md shadow-lg overflow-hidden ${\n        isDark ? \"text-white\" : \"text-black\"\n      }`}\n    >\n      {/* Logo + Hamburger */}\n      <div className=\"w-full flex items-center justify-between md:w-auto\">\n        <Link href={logo.href} className=\"flex items-center space-x-2 text-lg font-normal\">\n          {logo.image && <Image src={logo.image} alt={logo.text} width={32} height={32} />}\n          {logo.text && <span>{logo.text}</span>}\n        </Link>\n        {/* Hamburger */}\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"md:hidden inline-flex items-center justify-center p-2 rounded\"\n        >\n          <GiHamburgerMenu className={`${isDark ? \"text-white\" : \"text-black\"}`} />\n        </button>\n      </div>\n\n      {/* Links + Actions */}\n      <div\n        className={`md:flex md:flex-row md:items-center md:space-x-4 md:w-auto w-full ${\n          isOpen\n            ? `flex flex-col rounded-b-xl shadow-md px-6 py-4 space-y-4 mt-2 backdrop-blur-md ${\n                isDark ? \"bg-black/70 text-white\" : \"bg-white/80 text-black\"\n              }`\n            : \"hidden md:flex\"\n        }`}\n      >\n        {links.map((link) => (\n          <Link\n            key={link.href}\n            href={link.href}\n            className={`hover:underline ${\n              isDark ? \"hover:text-neutral-300\" : \"hover:text-neutral-700\"\n            }`}\n          >\n            {link.label}\n          </Link>\n        ))}\n        {/* Show actions inside hamburger on mobile */}\n        <div className=\"flex gap-2 md:hidden\">\n          <button\n            className={`px-4 py-1 rounded ring-1 ring-inset ${\n              isDark\n                ? \"bg-white text-black ring-black\"\n                : \"bg-black text-white ring-white\"\n            }`}\n          >\n            Log In\n          </button>\n          <button\n            className={`px-4 py-1 rounded ring-1 ring-inset ${\n              isDark\n                ? \"bg-black text-white dark:ring-white\"\n                : \"bg-white text-black ring-black\"\n            }`}\n          >\n            Sign Up\n          </button>\n        </div>\n      </div>\n\n      {/* Always visible actions on desktop */}\n      <div className=\"hidden md:flex\">{actions}</div>\n\n      {/* Glass overlay */}\n      <div className=\"pointer-events-none absolute inset-0 rounded-xl border border-white/20\">\n        <div\n          className={`absolute inset-0 rounded-xl bg-gradient-to-br ${\n            isDark ? \"from-white/10 to-transparent\" : \"from-neutral-300/30 to-transparent\"\n          }`}\n        ></div>\n      </div>\n    </nav>\n  );\n}",
    "implementation": "<Navbar logo={{ text: \"StreamUI\", href: \"/\", image: null }} links={[{ label: \"Home\", href: \"#home\" }, { label: \"Features\", href: \"#features\" }, { label: \"Reviews\", href: \"#Reviews\" }, { label: \"FAQs\", href: \"#faqs\" }]} mode=\"light\" />",
    "props": [
      {
        "name": "logo",
        "type": "string",
        "required": false,
        "default": "{{ text: \"StreamUI\", href: \"/\", image: null }",
        "description": ""
      },
      {
        "name": "links",
        "type": "string",
        "required": false,
        "default": "{[{ label: \"Home\", href: \"#home\" }",
        "description": ""
      },
      {
        "name": "mode",
        "type": "string",
        "required": false,
        "default": "light",
        "description": ""
      }
    ],
    "componentName": "Navbar1"
  },
  {
    "slug": "DarkGradientCard",
    "title": "Dark Gradient card",
    "description": "A modern, dark glassmorphism card component for SaaS products, designed to highlight features. It adds subtle hover lift, orange glow, and clean readability to your landing pages",
    "category": "cards",
    "code": "'use client';\nimport React from 'react';\nimport { GiHamburgerMenu } from \"streamui-deps\";\nimport { HiArrowSmallRight } from \"streamui-deps\";\n\nexport default function DynamicComponentCard({ icon, title, description, tag, linkName, linkUrl }) {\n  icon = icon || <GiHamburgerMenu className=\"w-6 h-6 text-white/75\" />;\n  title = title || \"Feature Title\";\n  description = description || \"This is a concise description of the feature that gives clear context to the user.\";\n  tag = tag || \"01\";\n  linkName = linkName || \"Learn More\";\n  linkUrl = linkUrl || \"#\";\n  return (\n    <div className=\"relative max-w-[250px] w-full rounded-2xl p-6 backdrop-blur-md bg-gradient-to-br from-neutral-800 via-neutral-950 to-orange-500 border border-white/50 flex flex-col gap-4 overflow-hidden shadow-xl transition-transform duration-300 hover:-translate-y-2 hover:shadow-2xl\">\n      {/* Tag */}\n      <span className=\"text-2xl text-orange-600 rounded-full w-fit font-bold font-mono\">\n        #{tag}\n      </span>\n\n      {/* Icon */}\n      <div className=\"w-16 h-16 flex items-center justify-center rounded-xl bg-white/10\">\n        {icon}\n      </div>\n\n      {/* Title */}\n      <h3 className=\"text-xl font-bold text-white dark:text-white\">\n        {title}\n      </h3>\n\n      {/* Description */}\n      <p className=\"text-md text-neutral-300 dark:text-neutral-300\">\n        {description}\n      </p>\n\n      {linkName && linkUrl && (\n        <a\n          href={linkUrl}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"group mt-2 flex text-sm text-white hover:text-white/90 relative items-center gap-1 transition\"\n        >\n          {linkName}<HiArrowSmallRight className='text-md'/>\n          <span className=\"absolute bottom-0 left-0 w-0 h-0.5 bg-orange-500 transition-all duration-300 group-hover:w-full\"></span>\n        </a>\n      )}\n\n      {/* Glass glow */}\n      <div className=\"pointer-events-none absolute inset-0 rounded-2xl\">\n        <div className=\"absolute bottom-4 right-4 w-40 h-40 rounded-full bg-orange-500/20 blur-3xl\"></div>\n      </div>\n    </div>\n  );\n}",
    "implementation": "<FeatureCard icon={<GiHamburgerMenu className=\"w-6 h-6 text-white/75\" />} title=\"Feature Title\" description=\"This is a concise description of the feature that gives clear context to the user.\" tag=\"01\" linkName=\"Learn More\" linkUrl=\"./\" />",
    "props": [
      {
        "name": "icon",
        "type": "string",
        "required": false,
        "default": "{<GiHamburgerMenu className=\"w-6 h-6 text-white/75\" />}",
        "description": ""
      },
      {
        "name": "title",
        "type": "string",
        "required": false,
        "default": "Feature Title",
        "description": ""
      },
      {
        "name": "description",
        "type": "string",
        "required": false,
        "default": "This is a concise description of the feature that gives clear context to the user.",
        "description": ""
      },
      {
        "name": "tag",
        "type": "string",
        "required": false,
        "default": "01",
        "description": ""
      },
      {
        "name": "linkName",
        "type": "string",
        "required": false,
        "default": "Learn More",
        "description": ""
      },
      {
        "name": "linkUrl",
        "type": "string",
        "required": false,
        "default": "./",
        "description": ""
      }
    ],
    "componentName": "Card1"
  },
  {
    "slug": "MinimalistCalendar",
    "title": "Minimalist Calendar",
    "description": "A clean, responsive minimalist calendar component with dynamic month and year navigation, today and selection indicators, and light/dark mode support. Perfect for SaaS dashboards and booking flows",
    "category": "utilities",
    "code": "\"use client\";\nimport React, { useState } from \"react\";\nimport { addMonths, subMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek, addDays, isSameMonth, isSameDay, format } from \"streamui-deps\";\nimport { IoIosArrowDropleftCircle, IoIosArrowDroprightCircle } from \"streamui-deps\";\nimport { PiCaretCircleDoubleRightFill, PiCaretCircleDoubleLeftFill } from \"streamui-deps\";\n\nexport default function Calendar({\n  value,\n  onDateSelect,\n  className = \"\",\n}) {\n  const [currentMonth, setCurrentMonth] = useState(startOfMonth(value || new Date()));\n  const [selectedDate, setSelectedDate] = useState(value || null);\n\n  const handleDateClick = (day) => {\n    setSelectedDate(day);\n    onDateSelect && onDateSelect(day);\n  };\n\n  const renderHeader = () => {\n    const currentYear = currentMonth.getFullYear();\n    const years = Array.from({ length: 21 }, (_, i) => currentYear - 10 + i);\n\n    const handleYearChange = (e) => {\n      const newYear = parseInt(e.target.value);\n      setCurrentMonth(new Date(newYear, currentMonth.getMonth(), 1));\n    };\n\n    return (\n      <div className=\"flex justify-between items-center mb-3\">\n        <div className=\"flex items-center gap-1\">\n          <button\n            onClick={() => setCurrentMonth(subMonths(currentMonth, 12))}\n            className=\"px-1 py-1 rounded hover:bg-neutral-200 dark:hover:bg-neutral-700 transition\"\n          >\n            <PiCaretCircleDoubleLeftFill className=\"text-xl\" />\n          </button>\n          <button\n            onClick={() => setCurrentMonth(subMonths(currentMonth, 1))}\n            className=\"px-1 py-1 rounded hover:bg-neutral-200 dark:hover:bg-neutral-700 transition\"\n          >\n            <IoIosArrowDropleftCircle className=\"text-xl\" />\n          </button>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"font-medium text-sm\">\n            {format(currentMonth, \"MMMM\")}\n          </div>\n          <select\n            value={currentMonth.getFullYear()}\n            onChange={(e) => setCurrentMonth(new Date(parseInt(e.target.value), currentMonth.getMonth(), 1))}\n            className=\"text-sm bg-transparent border border-neutral-300 dark:border-neutral-600 rounded px-1 py-0.5 focus:outline-none focus:ring-1 focus:ring-blue-500 dark:focus:ring-blue-400\"\n          >\n            {Array.from({ length: 21 }, (_, i) => currentMonth.getFullYear() - 10 + i).map((year) => (\n              <option key={year} value={year} className=\"bg-white dark:bg-black\">\n                {year}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <button\n            onClick={() => setCurrentMonth(addMonths(currentMonth, 1))}\n            className=\"px-1 py-1 rounded hover:bg-neutral-200 dark:hover:bg-neutral-700 transition\"\n          >\n            <IoIosArrowDroprightCircle className=\"text-xl\" />\n          </button>\n          <button\n            onClick={() => setCurrentMonth(addMonths(currentMonth, 12))}\n            className=\"px-1 py-1 rounded hover:bg-neutral-200 dark:hover:bg-neutral-700 transition\"\n          >\n            <PiCaretCircleDoubleRightFill className=\"text-xl\" />\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderDays = () => {\n    const days = [];\n    const startDate = startOfWeek(currentMonth);\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div key={i} className=\"text-xs text-center text-neutral-500\">\n          {format(addDays(startDate, i), \"EEE\")}\n        </div>\n      );\n    }\n    return <div className=\"grid grid-cols-7 mb-1\">{days}</div>;\n  };\n\n  const renderCells = () => {\n    const monthStart = startOfMonth(currentMonth);\n    const monthEnd = endOfMonth(monthStart);\n    const startDate = startOfWeek(monthStart);\n    const endDate = endOfWeek(monthEnd);\n\n    const rows = [];\n    let days = [];\n    let day = startDate;\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        const cloneDay = day;\n        const isToday = isSameDay(day, new Date());\n        const isSelected = selectedDate && isSameDay(day, selectedDate);\n\n        days.push(\n          <div\n            key={day}\n            onClick={() => handleDateClick(cloneDay)}\n            className={`text-center text-sm cursor-pointer rounded-md p-2 transition\n              ${isSameMonth(day, monthStart)\n                ? \"text-black dark:text-white\"\n                : \"text-neutral-400 dark:text-neutral-500\"}\n              ${isSelected\n                ? \"bg-black text-white dark:text-black border border-blue-500\"\n                : isToday\n                ? \"border border-black dark:border-white\"\n                : \"hover:bg-neutral-200 dark:hover:bg-neutral-700\"}`}\n          >\n            <div className=\"relative flex justify-center\">\n              {format(day, \"d\")}\n              {isToday && (\n                <span className=\"animate-pulse absolute top-4 w-2 h-2 bg-red-500 rounded-full mt-0.5\"></span>\n              )}\n            </div>\n          </div>\n        );\n        day = addDays(day, 1);\n      }\n      rows.push(<div key={day} className=\"grid grid-cols-7\">{days}</div>);\n      days = [];\n    }\n    return <div className=\"space-y-1\">{rows}</div>;\n  };\n\n  return (\n    <div\n      className={`w-full max-w-xs p-4 rounded-xl border border-neutral-200 dark:border-neutral-700 bg-white/80 dark:bg-black/50 backdrop-blur shadow-lg dark:shadow-black/40 ${className}`}\n    >\n      {renderHeader()}\n      {renderDays()}\n      {renderCells()}\n      <div className=\"mt-3 py-1 text-center text-sm rounded-lg bg-green-500 text-black dark:text-neutral-700\">\n        {selectedDate ? (\n          <>You selected: {format(selectedDate, \"MMMM d, yyyy\")}</>\n        ) : (\n          <>No date selected yet.</>\n        )}\n      </div>\n    </div>\n  );\n}",
    "implementation": "export default function CalendarDemoPage() {\n  const handleDateSelect = (date) => {\n    console.log(\"User selected:\", date);\n    // Use for state, API calls, etc.\n  };\n\n  return (\n    <main>\n      <Calendar onDateSelect={handleDateSelect} />\n    </main>\n  );\n}",
    "props": [
      {
        "name": "onDateSelect",
        "type": "string",
        "required": false,
        "default": "{handleDateSelect}",
        "description": ""
      }
    ],
    "componentName": "Calendar1"
  }
]